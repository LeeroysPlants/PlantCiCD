<!-- products/index.ejs -->
<%- include('partials/head', { title: 'Data' }) %>

<head>
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
          // Parse data passed from EJS
          const rawData = JSON.stringify(data);
      
          // Convert date strings to actual Date objects
          function parseData(dataset) {
            return dataset.map(d => ({
              time: new Date(d.time_),
              reading: d.reading
            }));
          }
      
          const waterLevelData = parseData(rawData.waterLevelData);
          const soilMoistureData = parseData(rawData.soilMoistureData);
          const tempData = parseData(rawData.tempData);
          const humidityData = parseData(rawData.humidityData);
      
          // Define dimensions
          const width = 800, height = 400, margin = { top: 40, right: 150, bottom: 50, left: 60 };
      
          // Create SVG container
          const svg = d3.select("#chart")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);
      
          const chartWidth = width - margin.left - margin.right;
          const chartHeight = height - margin.top - margin.bottom;
      
          // Define scales
          const xScale = d3.scaleTime()
            .domain(d3.extent(waterLevelData, d => d.time))
            .range([0, chartWidth]);
      
          const yScale = d3.scaleLinear()
            .domain([0, d3.max([...waterLevelData, ...soilMoistureData, ...tempData, ...humidityData], d => d.reading)])
            .range([chartHeight, 0]);
      
          // Define line generator
          function createLine(data) {
            return d3.line()
              .x(d => xScale(d.time))
              .y(d => yScale(d.reading))(data);
          }
      
          // Define color scale
          const color = d3.scaleOrdinal()
            .domain(["Water Level", "Soil Moisture", "Temperature", "Humidity"])
            .range(["blue", "green", "red", "purple"]);
      
          // Add lines
          svg.append("path").datum(waterLevelData).attr("d", createLine(waterLevelData)).attr("fill", "none").attr("stroke", color("Water Level")).attr("stroke-width", 2);
          svg.append("path").datum(soilMoistureData).attr("d", createLine(soilMoistureData)).attr("fill", "none").attr("stroke", color("Soil Moisture")).attr("stroke-width", 2);
          svg.append("path").datum(tempData).attr("d", createLine(tempData)).attr("fill", "none").attr("stroke", color("Temperature")).attr("stroke-width", 2);
          svg.append("path").datum(humidityData).attr("d", createLine(humidityData)).attr("fill", "none").attr("stroke", color("Humidity")).attr("stroke-width", 2);
      
          // Add Axes
          svg.append("g").attr("transform", `translate(0, ${chartHeight})`).call(d3.axisBottom(xScale).ticks(5));
          svg.append("g").call(d3.axisLeft(yScale));
      
          // Add Legend
          const legend = svg.append("g").attr("transform", `translate(${chartWidth + 20}, 20)`);
          const labels = ["Water Level", "Soil Moisture", "Temperature", "Humidity"];
          labels.forEach((label, i) => {
            legend.append("rect").attr("x", 0).attr("y", i * 20).attr("width", 15).attr("height", 15).attr("fill", color(label));
            legend.append("text").attr("x", 20).attr("y", i * 20 + 12).text(label).style("font-size", "12px");
          });
      
        });
      </script>
</head>
<body>
<center><h1 style="font-size: 40px; margin: 1% 0 0 0 ;">Data</h1></center>
<div class="index-container2">
  <h2> Recent Sensor Readings:</h2>
</div>
<div class="row">
  <div class="column left" style="width: 40%; margin-left: 9%; padding: 0%; margin-top: 0;">
    <div class="index-container" style="grid-template-columns: 1fr 1fr; padding: 0% ;width: 100%;">
      <h3> Water level: </h3> <p><%=recentWaterLevel %>  units</p>
      <h3> Soil Moisture:</h3> <p><%=recentSoilMoisture %> units </p>
      <h3> Temperature (F):</h3> <p><%=recentTemp %> degrees</p>
      <h3> Humidity:</h3> <p><%=recentHumidity %> units</p>
    </div>
  </div>
  <div class="column right" style="width: 38%; margin-right: 10%;">
    <div class="index-container2" style="grid-template-columns: 1fr 1fr; width: 100%;">
      <button class="watering-can" type="submit" onclick="alert('Our plant will be watered shortly. Thanks!')"></button>
      <input type="hidden" name="plantId" value="1"> &nbsp;
      <p style="font-size: medium;">Click to water our plant!</p>
    </div>
  </div>
</div>
<!-- sample data being displayed at the top of the page in human-readable form: -->
 <h2>  <% data.waterLevelData[0].reading %>,  <% data.waterLevelData[0].time_ %> </h2>
<!-- all sample data points being displayed at the top of the page; not very readable, but to ensure everything is being read by the page/server correctly -->
    <center><h2>Soil Moisture vs. Time Graph</h2></center>

<div class="index-container2">
    <p style="font-size:large; line-height: 1.5;">This chart tracks the soil moisture of our plant. If it falls under [THRESHOLD 1], the plant will automatically water itself. If it's too high above [THRESHOLD 2], the plant will be unable to be watered. If it's in between, feel free to click the "Water" button to water the plant from afar!</p>
        <!-- "Works", but not fully:  -->
        <% %>
        <input id="time-slider" type="range" min="2025-01-01" max="2026-01-01" step="5" value="2025-01-01" style="width: 600px; margin-bottom: 10px;">
        <div id="chart"></div>
    
</div>
</body>
