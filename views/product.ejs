<!-- products/index.ejs -->
<%- include('partials/head', { title: 'Data' }) %>

<head>
    <script src="https://d3js.org/d3.v6.min.js"></script> <!-- I don't think this line of code does anything? Probably safe to remove -->

    <script type="module">
    import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

    // Declare the chart dimensions and margins.
    const width = 640;
    const height = 400;
    const marginTop = 20;
    const marginRight = 20;
    const marginBottom = 30;
    const marginLeft = 40;

    // Initial time range
    let startDate = new Date("2025-01-01");
    let endDate = new Date("2026-01-01");

    // Declare the x (horizontal position) scale.
    const x = d3.scaleUtc()
        .domain([startDate, endDate])
        .range([marginLeft, width - marginRight]);

    // Declare the y (vertical position) scale.
    const y = d3.scaleLinear()
        .domain([0, 100])
        .range([height - marginBottom, marginTop]);

    // Create the SVG container.
    const svg = d3.create("svg")
        .attr("width", width)
        .attr("height", height);

    // Add the x-axis.
    const xAxis = svg.append("g")
        .attr("transform", `translate(0,${height - marginBottom})`)
        .call(d3.axisBottom(x));

    // Add the y-axis.
    svg.append("g")
        .attr("transform", `translate(${marginLeft},0)`)
        .call(d3.axisLeft(y));

    // Append the SVG element to the container.
    document.getElementById("chart-container").appendChild(svg.node());

    // Handle slider changes
    document.getElementById("time-slider").addEventListener("input", function(event) {
        const newStartDate = new Date(parseInt(event.target.value));
        const newEndDate = new Date(newStartDate);
        newEndDate.setFullYear(newEndDate.getFullYear() + 1); // Keep a 1-year range

        // Update the x scale
        x.domain([newStartDate, newEndDate]);

        // Update the x-axis
        xAxis.transition().duration(500).call(d3.axisBottom(x));
    });

    /*
    DIDN'T WORK IDK WHY:
        // Specify the dimensions of the chart.
        const width = 928;
        const height = 600;
        const marginTop = 20;
        const marginRight = 30;
        const marginBottom = 30;
        const marginLeft = 50;

        // Specify the horizontal (time) axis.
        const x = d3.scaleUtc()
            .domain(d3.extent(aapl, d => d.Date))
            .range([marginLeft, width - marginRight])

        // Specify the vertical axis.
        const y = d3.scaleLog()
            .domain([d3.min(aapl, d => d.Close / basis * 0.9), d3.max(aapl, d => d.Close / basis / 0.9)])
            .rangeRound([height - marginBottom, marginTop])

        // A format function that transforms 1.2 into "+20%", etc.
        const f = d3.format("+.0%");
        const format = x => x === 1 ? "0%" : f(x - 1);

        // Create the SVG container.
        const svg = d3.create("svg").attr("viewBox", [0, 0, width, height]);

        // Create the horizontal (date) axis.
        svg.append("g")
            .attr("transform", `translate(0,${y(1)})`)
            .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0))
            .call(g => g.select(".domain").remove());

        // Create the vertical axis, with grid lines.
        svg.append("g")
            .attr("transform", `translate(${marginLeft},0)`)
            .call(d3.axisLeft(y)
                .tickValues(d3.ticks(...y.domain(), 10))
                .tickFormat(format))
            .call(g => g.selectAll(".tick line").clone()
                .attr("stroke-opacity", d => d === 1 ? null : 0.2)
                .attr("x2", width - marginLeft - marginRight))
            .call(g => g.select(".domain").remove());

        // Create a line path that normalizes the value with respect to the base.
        const line = d3.line()
            .x(d => x(d.Date))
            .y(d => y(d.Close / basis));

        svg.append("path")
            .datum(aapl)
            .attr("fill", "none")
            .attr("stroke", "steelblue")
            .attr("stroke-width", 1.5)
            .attr("stroke-linejoin", "round")
            .attr("stroke-linecap", "round")
            .attr("d", line);
        
        return svg.node();
    */
    </script>

</head>

<div class="index-container2">
    <span>
        <div class="landing-title">Soil Moisture vs. Time</div>
        <div class="landing-text">This chart tracks the soil moisture of our plant. If it falls under [THRESHOLD 1], the plant will automatically water itself. If it's too high above [THRESHOLD 2], the plant will be unable to be watered. If it's in between, feel free to click the "Water" button to water the plant from afar!</div>
        <input id="time-slider" type="range" min="2025-01-01" max="2026-01-01" step="5" value="2025-01-01" style="width: 600px; margin-bottom: 10px;">
        <div id="chart-container"></div>
    </span>
</div>

<!--
        <script>
            function addToCart(product_id, product_name, product_price) {
                fetch('/addToCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        product_id, 
                        product_name, 
                        product_price, 
                    }),
                })
                .then(response => {
                    if(!response.ok) {
                        throw new Error(`HTTP Error! Status: ${response.status}`)
                    }
                })
            }

            function handleCheckout() {
                console.log("handle checkout")
                fetch('/checkout')
                .then(response => {
                    if(!response.ok) {
                        console.error("oh no");
                    } else {
                        console.log('rerouting');
                        window.location.href = `http://localhost:3000/checkout`;
                    }
                    console.log(response.text());
                })
            }
        </script>

  

        <div class="container" style="margin-top: 3%;">
            <ul class="product-list">
                <% products.forEach(product => { %>
                    <% if(product.display) { %>
                        <li class="product-list-item">
                            <span><img class="image-text" src="<%=product.product_image%>" alt="<%= product.product_name%> Image"></span>
                            <span class="product-text"><%= product.product_name %></span>
                            <span class="price-text">$<%= product.product_price %></span>
                            <span><button class="add-to-cart" onclick="addToCart('<%=product.product_id%>', '<%=product.product_name%>', '<%=product.product_price%>')"></button></span>
                        </li>
                    <% } %>
                <% }); %>
            </ul>
        </div>
-->